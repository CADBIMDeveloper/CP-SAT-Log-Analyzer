import streamlit as st
import pandas as pd
import numpy as np
from cpsat_log_parser import parse_blocks

from cpsat_log_parser.blocks import SearchProgressBlock, SearchStatsBlock, LnsStatsBlock, SolutionRepositoriesBlock, SolutionsBlock, ObjectiveBoundsBlock, TableBlock, SolverBlock

st.title('CP-SAT Log Analyzer')
st.markdown("This app analyzes the log files generated by CP-SAT.")

st.header("Log File")
st.markdown("Upload a log file to analyze it. You can enable log output by setting the `log_search_progress` parameter to `True`.")
# accept log via file upload or text input
data = None
log_file = st.file_uploader("Upload a log file", type="txt")
if log_file is not None:
    data = log_file.read().decode("utf-8")
else:
    log_text = st.text_area("Or paste a log here")
    if log_text:
        data = log_text

if not data:
    st.stop()
else:
    st.header("Log Analysis")
    for block in parse_blocks(data):
        if isinstance(block, SearchProgressBlock):
            with st.expander(block.get_title()):
                if block.get_help():
                    st.info(block.get_help())
                st.text(str(block))
            fig = block.as_plotly()
            st.plotly_chart(fig)
        elif isinstance(block, SolverBlock):
            md = f"**CP-SAT version: {block.get_version()}**\n\n"
            major, minor, patch = block.get_parsed_version()
            if major < 9 or (major == 9 and minor < 8):
                st.warning("Old version of CP-SAT detected. Newer versions can have significant performance improvements.")
            md += f"Number of workers: {block.get_number_of_workers()}\n\n"
            # print all parameters (key: value)
            if block.get_parameters():
                md += "*CP-SAT was setup with the following parameters:*\n"
                st.markdown(md)
                st.json(block.get_parameters())

        elif isinstance(block, SearchStatsBlock):
            with st.expander(block.get_title()):
                if block.get_help():
                    st.info(block.get_help())
                df = block.to_pandas()
                st.dataframe(df, column_config= {
                    "Restarts": st.column_config.NumberColumn(help="Restarting the search once we learned about the importance of variables can significantly reduce the size of the search tree."),
                })
        elif isinstance(block, SolutionsBlock):
            with st.expander(block.get_title()):
                if block.get_help():
                    st.info(block.get_help())
                st.markdown(f"Number of solutions: {block.get_num_solutions()}")
                df = block.to_pandas()
                st.dataframe(df)
        elif isinstance(block, TableBlock):
            with st.expander(block.get_title()):
                if block.get_help():
                    st.info(block.get_help())
                tab1, tab2 = st.tabs(["Table", "Raw"])
                df = block.to_pandas()
                tab1.dataframe(df)
                tab2.text(str(block))
        else:
            with st.expander(block.get_title()):
                if block.get_help():
                    st.info(block.get_help())
                st.text(str(block))

